# pdf_utils.py

# Import BytesIO for handling in-memory file objects
from io import BytesIO
# Import A4 page size from reportlab
from reportlab.lib.pagesizes import A4
# Import mm for millimeter units
from reportlab.lib.units import mm
# Import canvas for drawing on PDF
from reportlab.pdfgen import canvas
# Import color definitions
from reportlab.lib import colors

# This function draws the header and footer on each PDF page
def _header_footer(c, title):
    w, h = A4  # Get width and height of the page
    c.setFillColor(colors.black)  # Set text color to black
    c.setFont("Helvetica-Bold", 14)  # Set font for title
    c.drawString(20*mm, h - 20*mm, title)  # Draw the title at the top left
    c.setFont("Helvetica", 8)  # Set font for footer
    # Draw footer text at the bottom right
    c.drawRightString(w - 20*mm, 15*mm, "Generated by Trade Path Optimizer (Demo)")

# This function draws a key-value pair (label and value) at a position
def _kv(c, x, y, key, val, key_w=40*mm, gap=4*mm):
    c.setFont("Helvetica-Bold", 9)  # Bold font for key
    c.drawString(x, y, f"{key}:")  # Draw the key/label
    c.setFont("Helvetica", 9)  # Normal font for value
    # Draw the value next to the key, leave blank if None
    c.drawString(x + key_w + gap, y, str(val) if val is not None else "")

# This function draws a table with headers and rows at a position
def _table(c, x, y, col_defs, rows, row_h=7*mm, header_fill=colors.lightgrey):
    """
    col_defs: list of (header, width_mm, key) for each column
    rows: list of dictionaries with data for each row
    """
    w_total = sum(w for _, w, _ in col_defs)*mm  # Calculate total table width
    # Draw header background
    c.setFillColor(header_fill)
    c.rect(x, y - row_h, w_total, row_h, fill=1, stroke=0)
    c.setFillColor(colors.black)  # Header text color
    c.setFont("Helvetica-Bold", 9)  # Header font
    cx = x  # Current x position for columns
    for head, w_mm, _ in col_defs:
        c.drawString(cx + 2*mm, y - row_h + 2*mm, head)  # Draw column header
        cx += w_mm*mm  # Move to next column
    # Draw data rows
    c.setFont("Helvetica", 9)
    yy = y - row_h  # Start below header
    for r in rows:
        yy -= row_h  # Move to next row position
        c.setFillColor(colors.white)  # Row background
        c.rect(x, yy, w_total, row_h, fill=1, stroke=1)  # Draw row box
        cx = x
        for _, w_mm, key in col_defs:
            val = r.get(key, "")  # Get value for column
            c.drawString(cx + 2*mm, yy + 2*mm, str(val))  # Draw value
            cx += w_mm*mm
    return yy  # Return y position after last row

# This function generates a Commercial Invoice PDF
def make_ci_pdf(data, items):
    """
    data: dictionary with invoice and party info
    items: list of dictionaries with item details
    """
    buf = BytesIO()  # In-memory file object
    c = canvas.Canvas(buf, pagesize=A4)  # Create a new PDF canvas
    w, h = A4  # Page size

    _header_footer(c, "COMMERCIAL INVOICE")  # Draw the header and footer

    y = h - 35*mm  # Start y position for info
    # Draw invoice key-value fields
    _kv(c, 20*mm, y, "Invoice No", data.get("invoice_no","INV-001")); y -= 6*mm
    _kv(c, 20*mm, y, "Invoice Date", data.get("invoice_date","")); y -= 6*mm
    _kv(c, 20*mm, y, "Exporter", data.get("exporter_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Consignee", data.get("consignee_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Origin", data.get("origin","")); y -= 6*mm
    _kv(c, 20*mm, y, "Destination", data.get("destination","")); y -= 6*mm
    _kv(c, 20*mm, y, "Incoterm", data.get("incoterm","")); y -= 6*mm
    _kv(c, 20*mm, y, "Currency", data.get("currency","USD")); y -= 10*mm

    # Define columns for the items table
    col_defs = [
        ("Description", 60, "description"),
        ("HS Code", 25, "hs_code"),
        ("Qty", 15, "qty"),
        ("Unit", 15, "unit"),
        ("Unit Price", 25, "unit_price"),
        ("Amount", 25, "amount"),
    ]
    # Draw the items table, update y position
    y = _table(c, 20*mm, y, col_defs, items)

    # Draw totals section on the right
    y -= 10*mm
    _kv(c, 120*mm, y, "Subtotal", f"{data.get('currency','USD')} {data.get('subtotal','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Freight", f"{data.get('currency','USD')} {data.get('freight','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Insurance", f"{data.get('currency','USD')} {data.get('insurance','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Total", f"{data.get('currency','USD')} {data.get('total','0.00')}", key_w=25*mm)

    c.showPage()  # Finish the page
    c.save()  # Save PDF
    buf.seek(0)  # Go to the start of the file
    return buf  # Return the PDF file object

# This function generates a Packing List PDF
def make_pl_pdf(data, items):
    buf = BytesIO()  # In-memory file
    c = canvas.Canvas(buf, pagesize=A4)  # New PDF canvas
    w, h = A4
    _header_footer(c, "PACKING LIST")  # Draw header and footer

    y = h - 35*mm  # Start y position
    # Draw packing list info
    _kv(c, 20*mm, y, "Exporter", data.get("exporter_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Consignee", data.get("consignee_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Shipment Ref", data.get("shipment_ref","REF-001")); y -= 6*mm
    _kv(c, 20*mm, y, "Packages", data.get("packages_count","")); y -= 6*mm
    _kv(c, 20*mm, y, "Gross Weight (kg)", data.get("gross_weight_kg","")); y -= 6*mm
    _kv(c, 20*mm, y, "Net Weight (kg)", data.get("net_weight_kg","")); y -= 10*mm

    # Define columns for the packages table
    col_defs = [
        ("Package No", 20, "pkg_no"),
        ("Description", 70, "description"),
        ("Qty", 15, "qty"),
        ("Unit", 15, "unit"),
        ("Gross Wt (kg)", 25, "gross_wt"),
        ("Net Wt (kg)", 25, "net_wt"),
    ]
    # Draw packages table
    y = _table(c, 20*mm, y, col_defs, items)
    c.showPage()
    c.save()
    buf.seek(0)
    return buf

# This function makes a simple statement PDF with lines of text
def make_simple_statement(title, lines):
    """Generic 1-page statement (e.g., ISPM-15, RoHS, REACH, CE DoC placeholder)."""
    buf = BytesIO()  # In-memory file
    c = canvas.Canvas(buf, pagesize=A4)  # New PDF canvas
    w, h = A4
    _header_footer(c, title)  # Draw header/footer
    y = h - 40*mm  # Start y position for text
    c.setFont("Helvetica", 11)  # Set font for statement text
    for line in lines:
        c.drawString(20*mm, y, line)  # Draw each line of text
        y -= 7*mm  # Move to next line
        if y < 30*mm:  # If near bottom of page, go to new page
            c.showPage(); _header_footer(c, title); y = h - 40*mm
    c.showPage()  # Finish the page
    c.save()
    buf.seek(0)
    return buf  # Return the PDF file object
