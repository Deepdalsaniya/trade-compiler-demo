# pdf_utils.py
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.lib import colors

def _header_footer(c, title):
    w, h = A4
    c.setFillColor(colors.black)
    c.setFont("Helvetica-Bold", 14)
    c.drawString(20*mm, h - 20*mm, title)
    c.setFont("Helvetica", 8)
    c.drawRightString(w - 20*mm, 15*mm, "Generated by Trade Path Optimizer (Demo)")

def _kv(c, x, y, key, val, key_w=40*mm, gap=4*mm):
    c.setFont("Helvetica-Bold", 9)
    c.drawString(x, y, f"{key}:")
    c.setFont("Helvetica", 9)
    c.drawString(x + key_w + gap, y, str(val) if val is not None else "")

def _table(c, x, y, col_defs, rows, row_h=7*mm, header_fill=colors.lightgrey):
    """
    col_defs: list of tuples (header, width_mm, key) where key in row dict
    rows: list of dicts
    """
    w_total = sum(w for _, w, _ in col_defs)*mm
    # header
    c.setFillColor(header_fill)
    c.rect(x, y - row_h, w_total, row_h, fill=1, stroke=0)
    c.setFillColor(colors.black)
    c.setFont("Helvetica-Bold", 9)
    cx = x
    for head, w_mm, _ in col_defs:
        c.drawString(cx + 2*mm, y - row_h + 2*mm, head)
        cx += w_mm*mm
    # rows
    c.setFont("Helvetica", 9)
    yy = y - row_h
    for r in rows:
        yy -= row_h
        c.setFillColor(colors.white)
        c.rect(x, yy, w_total, row_h, fill=1, stroke=1)
        cx = x
        for _, w_mm, key in col_defs:
            val = r.get(key, "")
            c.drawString(cx + 2*mm, yy + 2*mm, str(val))
            cx += w_mm*mm
    return yy

def make_ci_pdf(data, items):
    """
    data: dict with exporter/consignee info, incoterm, invoice_no, date, origin, destination, etc.
    items: list of dicts [{'description','hs_code','qty','unit','unit_price','amount'}]
    """
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    w, h = A4

    _header_footer(c, "COMMERCIAL INVOICE")

    y = h - 35*mm
    _kv(c, 20*mm, y, "Invoice No", data.get("invoice_no","INV-001")); y -= 6*mm
    _kv(c, 20*mm, y, "Invoice Date", data.get("invoice_date","")); y -= 6*mm
    _kv(c, 20*mm, y, "Exporter", data.get("exporter_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Consignee", data.get("consignee_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Origin", data.get("origin","")); y -= 6*mm
    _kv(c, 20*mm, y, "Destination", data.get("destination","")); y -= 6*mm
    _kv(c, 20*mm, y, "Incoterm", data.get("incoterm","")); y -= 6*mm
    _kv(c, 20*mm, y, "Currency", data.get("currency","USD")); y -= 10*mm

    # Items table
    col_defs = [
        ("Description", 60, "description"),
        ("HS Code", 25, "hs_code"),
        ("Qty", 15, "qty"),
        ("Unit", 15, "unit"),
        ("Unit Price", 25, "unit_price"),
        ("Amount", 25, "amount"),
    ]
    y = _table(c, 20*mm, y, col_defs, items)

    # Totals
    y -= 10*mm
    _kv(c, 120*mm, y, "Subtotal", f"{data.get('currency','USD')} {data.get('subtotal','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Freight", f"{data.get('currency','USD')} {data.get('freight','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Insurance", f"{data.get('currency','USD')} {data.get('insurance','0.00')}", key_w=25*mm); y -= 6*mm
    _kv(c, 120*mm, y, "Total", f"{data.get('currency','USD')} {data.get('total','0.00')}", key_w=25*mm)

    c.showPage()
    c.save()
    buf.seek(0)
    return buf

def make_pl_pdf(data, items):
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    w, h = A4

    _header_footer(c, "PACKING LIST")

    y = h - 35*mm
    _kv(c, 20*mm, y, "Exporter", data.get("exporter_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Consignee", data.get("consignee_name","")); y -= 6*mm
    _kv(c, 20*mm, y, "Shipment Ref", data.get("shipment_ref","REF-001")); y -= 6*mm
    _kv(c, 20*mm, y, "Packages", data.get("packages_count","")); y -= 6*mm
    _kv(c, 20*mm, y, "Gross Weight (kg)", data.get("gross_weight_kg","")); y -= 6*mm
    _kv(c, 20*mm, y, "Net Weight (kg)", data.get("net_weight_kg","")); y -= 10*mm

    col_defs = [
        ("Package No", 20, "pkg_no"),
        ("Description", 70, "description"),
        ("Qty", 15, "qty"),
        ("Unit", 15, "unit"),
        ("Gross Wt (kg)", 25, "gross_wt"),
        ("Net Wt (kg)", 25, "net_wt"),
    ]
    y = _table(c, 20*mm, y, col_defs, items)
    c.showPage()
    c.save()
    buf.seek(0)
    return buf

def make_simple_statement(title, lines):
    """Generic 1-page statement (e.g., ISPM-15, RoHS, REACH, CE DoC placeholder)."""
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    w, h = A4
    _header_footer(c, title)
    y = h - 40*mm
    c.setFont("Helvetica", 11)
    for line in lines:
        c.drawString(20*mm, y, line)
        y -= 7*mm
        if y < 30*mm:
            c.showPage(); _header_footer(c, title); y = h - 40*mm
    c.showPage()
    c.save()
    buf.seek(0)
    return buf
